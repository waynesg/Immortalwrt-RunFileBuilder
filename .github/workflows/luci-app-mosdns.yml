name: Build luci-app-mosdns

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch latest release tag from mosdns
        id: fetch_latest_tag
        run: |
          latest_tag=$(curl -sk https://api.github.com/repos/sbwml/luci-app-mosdns/releases | grep "tag_name" | grep v5 | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//;s/ //')
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "RUN_FILE=luci-app-mosdns_x86_64_${latest_tag}.run" >> $GITHUB_ENV

      - name: Clone makeself repository
        run: git clone https://github.com/megastep/makeself.git

      - name: Download latest mosdns files
        run: |
          mkdir -p mosdns_x86_64
          curl -sk https://api.github.com/repos/sbwml/luci-app-mosdns/releases | grep "browser_download_url" | grep "${{ env.LATEST_TAG }}" > releases.txt

          download() {
            url=$1
            file=$(basename "$url")
            echo "Downloading $file..."
            curl -kL "$url" -o "mosdns_x86_64/$file"
          }

          grep -E "mosdns_5.*x86_64.ipk" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done
          grep -E "v2dat_.*x86_64.ipk" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done
          grep -E "luci-app-mosdns_.*all.ipk" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done
          grep -E "luci-i18n-mosdns-zh-cn_.*all.ipk" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done
          grep -E "v2ray-geoip.*\.dat" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done
          grep -E "v2ray-geosite.*\.dat" releases.txt | awk -F '"' '{print $4}' | while read url; do download "$url"; done

      - name: Create install.sh
        run: |
          cat <<EOF > mosdns_x86_64/install.sh
          #!/bin/sh
          opkg update
          opkg install *.ipk
          EOF
          chmod +x mosdns_x86_64/install.sh

      - name: Move directory to makeself
        run: mv mosdns_x86_64 makeself/

      - name: Create .run file
        run: |
          cd makeself
          chmod +x ../makeself/makeself.sh
          ./makeself.sh mosdns_x86_64/ "${{ env.RUN_FILE }}" "Auto install luci-app-mosdns" ./install.sh

      - name: Check .run file
        run: ls -lh makeself/*.run

      - name: Push .run to Immortalwrt-ImageBuilder
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git clone https://x-access-token:${{ secrets.REPO_TOKEN }}@github.com/waynesg/Immortalwrt-ImageBuilder.git target-repo

          cd target-repo

          CURRENT_FILE="${{ env.RUN_FILE }}"
          echo "ÂΩìÂâçÊûÑÂª∫Êñá‰ª∂: $CURRENT_FILE"

          # Âà†Èô§ÊóßÁöÑ luci-app-mosdns_*.runÔºà‰øùÁïôÂΩìÂâçÔºâ
          find extra-packages/ -type f -name "luci-app-mosdns_x86_64_*.run" ! -name "$CURRENT_FILE" -exec rm -f {} +

          # Êã∑Ë¥ùÊñ∞ÊûÑÂª∫ÁöÑ .run Êñá‰ª∂
          cp ../makeself/"$CURRENT_FILE" extra-packages/

          git checkout main
          git add -u extra-packages/
          git add extra-packages/"$CURRENT_FILE"
          git commit -m "ü§ñ Ëá™Âä®ÂêåÊ≠•: $CURRENT_FILE"
          git push

      - name: Cleanup old workflow runs (keep latest 3)
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          KEEP: 3
        run: |
          echo "Fetching workflow ID for current workflow..."
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows \
            | jq -r --arg name "${{ github.workflow }}" '.workflows[] | select(.name == $name) | .id')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "‚ùå Workflow ID not found for '${{ github.workflow }}'"
            exit 0
          fi

          echo "‚úÖ Found workflow ID: $WORKFLOW_ID"

          echo "Deleting old workflow runs, keeping the latest $KEEP..."

          gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --paginate -q '.workflow_runs | .[] | .id' | tail -n +$(($KEEP + 1)) | while read run_id; do
            echo "üóëÔ∏è Deleting workflow run $run_id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runs/$run_id
          done
