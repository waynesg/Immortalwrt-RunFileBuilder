name: Build luci-app-subconverter .run package

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set base environment variables
        run: |
          echo "PKG_NAME=luci-app-subconverter" >> $GITHUB_ENV
          echo "TARGET=amd64" >> $GITHUB_ENV
          echo "TAG=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

      - name: Create build directory
        run: mkdir -p build_dir

      - name: Download .ipk and binary
        run: |
          cd build_dir

          BASE_URL="https://api.github.com/repos/0x2196f3/luci-app-subconverter/releases/latest"
          
          IPK_URL=$(curl -s $BASE_URL | jq -r '.assets[] | select(.name | test("^luci-app-subconverter_.*_amd64\\.ipk$")) | .browser_download_url')
          if [ -z "$IPK_URL" ]; then
            echo "❌ 未找到 luci-app-subconverter 的 .ipk 下载链接"
            exit 1
          fi
          echo "✅ 下载 .ipk: $IPK_URL"
          curl -LO "$IPK_URL"

          # 固定地址下载 subconverter_amd64 可执行文件
          BIN_URL="https://raw.githubusercontent.com/0x2196f3/luci-app-subconverter/main/bin/subconverter_amd64"
          echo "✅ 下载 subconverter_amd64: $BIN_URL"
          curl -LO "$BIN_URL"
          chmod +x subconverter_amd64
          
      - name: Extract version from .ipk filename
        run: |
          cd build_dir
          FILE=$(ls luci-app-subconverter_*.ipk)
          VERSION=$(echo "$FILE" | sed -n 's/^luci-app-subconverter_\([^-]*-[0-9]*\)_.*\.ipk$/\1/p')
          echo "PKG_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RUN_FILE=luci-app-subconverter_${VERSION}_${{ env.TARGET }}.run" >> $GITHUB_ENV

      - name: Create install.sh
        run: |
          cat <<EOF > build_dir/install.sh
          #!/bin/sh
          opkg update
          opkg install luci-app-subconverter_*.ipk
          install -m 755 subconverter_amd64 /usr/bin/subconverter
          echo "${{ env.PKG_VERSION }}" > /etc/subconverter.version
          EOF
          chmod +x build_dir/install.sh

      - name: Clone makeself
        run: git clone https://github.com/megastep/makeself.git

      - name: Build .run file
        run: |
          chmod +x makeself/makeself.sh
          makeself/makeself.sh build_dir "${{ env.RUN_FILE }}" "Install luci-app-subconverter" ./install.sh

      - name: Check .run file
        run: ls -lh "${{ env.RUN_FILE }}"

      - name: Push to Immortalwrt-ImageBuilder
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 克隆目标仓库
          git clone https://x-access-token:${{ secrets.REPO_TOKEN }}@github.com/waynesg/Immortalwrt-ImageBuilder.git target-repo
          cd target-repo
          git checkout main
          cd extra-packages

          # 删除旧的 subconverter .run 文件（保留当前版本）
          for file in luci-app-subconverter_*.run; do
            if [ "$file" != "${{ env.RUN_FILE }}" ] && [ -f "$file" ]; then
              echo "删除旧文件: $file"
              git rm -f "$file"
            fi
          done

          cd ../..
          cp "${{ env.RUN_FILE }}" target-repo/extra-packages/

          cd target-repo
          git add extra-packages/"${{ env.RUN_FILE }}"
          git commit -m "🤖 自动同步 luci-app-subconverter: 版本 ${{ env.PKG_VERSION }}"
          git push
          
      - name: Cleanup old workflow runs (keep latest 3)
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          KEEP: 3
        run: |
          echo "Fetching workflow ID for current workflow..."
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows \
            | jq -r --arg name "${{ github.workflow }}" '.workflows[] | select(.name == $name) | .id')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "❌ Workflow ID not found for '${{ github.workflow }}'"
            exit 0
          fi

          echo "✅ Found workflow ID: $WORKFLOW_ID"

          echo "Deleting old workflow runs, keeping the latest $KEEP..."

          gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --paginate -q '.workflow_runs | .[] | .id' | tail -n +$(($KEEP + 1)) | while read run_id; do
            echo "🗑️ Deleting workflow run $run_id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runs/$run_id
          done
