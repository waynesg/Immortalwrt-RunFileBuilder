#=================================================
# https://github.com/wukongdaily/RunFilesBuilder
# Description: Build RunFiles using GitHub Actions
# Lisence: MIT
# Author: wukongdaily
# Blog: wkdaily.cpolar.cn
#=================================================

name: Make OpenClash run files 

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Create OpenClash & openclash directory for git & ipk
        run: mkdir -p OpenClash openclash-x86 openclash-a53
        
      - name: Checkout package branch to OpenClash directory
        uses: actions/checkout@v4
        with:
          repository: vernesong/OpenClash
          path: OpenClash
          ref: package
          
      - name: Copy latest openclash IPK to openclash directory
        run: |
          cp OpenClash/master/*.ipk openclash-x86

      - name: Get version info
        id: extract_version
        run: |
          first_line=$(head -n 1 OpenClash/master/version)
          echo "version=$first_line" >> $GITHUB_ENV

      - name: Set output .run filename
        run: |
          echo "RUN_FILE=luci-app-openclash_x86_64_${{ env.version }}.run" >> $GITHUB_ENV

      - name: Create Meta directory for git
        run: mkdir Meta
      
      - name: Checkout core branch to Meta directory
        uses: actions/checkout@v4
        with:
          repository: vernesong/OpenClash
          path: Meta
          ref: core
      
      - name: list all cores on core branch
        run: ls Meta/master/meta

      - name: Copy latest meta core to openclash directory
        run: |
          tar -xzvf Meta/master/meta/clash-linux-amd64.tar.gz -C openclash-x86
          #tar -xzvf Meta/master/meta/clash-linux-arm64.tar.gz -C openclash-a53
          mv openclash-x86/clash openclash-x86/clash_meta
          #mv openclash-a53/clash openclash-a53/clash_meta
          ls openclash-x86

      - name: Create install.sh script save to openclash directory
        run: |
          cat << 'EOF' > openclash-x86/install.sh
          opkg update
          if [ $? -ne 0 ]; then
              echo "update failed。"
              exit 1
          fi
          opkg install *.ipk || exit 1
          mv clash_meta /etc/openclash/core/
          sleep 10s
          ifconfig br-lan > /dev/null 2>&1
          if [ $? -ne 0 ]; then
              echo "接口错误，重启网络。"
              /etc/init.d/network restart
              echo "重启完毕"
              exit 0
          fi
          EOF
          chmod +x openclash-x86/install.sh

      - name: Clone makeself repository for self-extracting installer
        run: | 
          git clone https://github.com/megastep/makeself.git

      
      - name: move openclash directory to makeself & create run
        run: |
          mv openclash-x86 makeself/
          cd makeself
          ./makeself.sh openclash-x86/ ${{ env.RUN_FILE }} "by github action" ./install.sh
          #./makeself.sh openclash-a53/ openclash-aarch64_cortex-a53-${{ env.version }}.run "by github action" ./install.sh


      - name: Push run file to Immortalwrt-ImageBuilder
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git clone https://x-access-token:${{ secrets.REPO_TOKEN }}@github.com/waynesg/Immortalwrt-ImageBuilder.git target-repo

          cd target-repo

          CURRENT_RUN="luci-app-openclash_x86_64_${{ env.version }}.run"

          # 删除除当前文件之外的所有 luci-app-openclash_x86_64_*.run
          find extra-packages/ -type f -name "luci-app-openclash_x86_64_*.run" ! -name "$CURRENT_RUN" -exec rm -f {} +

          # 拷贝当前构建的 .run 文件
          cp ../makeself/"$CURRENT_RUN" extra-packages/

          git checkout main
          git add -u extra-packages/
          git add extra-packages/"$CURRENT_RUN"
          git commit -m "🤖 自动同步: $CURRENT_RUN"
          git push

      - name: Cleanup old workflow runs (keep latest 3)
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          KEEP: 3
        run: |
          echo "Fetching workflow ID for current workflow..."
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows \
            | jq -r --arg name "${{ github.workflow }}" '.workflows[] | select(.name == $name) | .id')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "❌ Workflow ID not found for '${{ github.workflow }}'"
            exit 0
          fi

          echo "✅ Found workflow ID: $WORKFLOW_ID"

          echo "Deleting old workflow runs, keeping the latest $KEEP..."

          gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --paginate -q '.workflow_runs | .[] | .id' | tail -n +$(($KEEP + 1)) | while read run_id; do
            echo "🗑️ Deleting workflow run $run_id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runs/$run_id
          done
